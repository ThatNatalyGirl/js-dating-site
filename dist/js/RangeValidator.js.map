{"version":3,"sources":["RangeValidator.js"],"names":["RangeValidator","selector","min","max","numeric","parseFloat","$field","value","isNaN","errors","push","Validator"],"mappings":";;;;;;;;;;;;IAAMA,c;;;AAEL,yBAAYC,QAAZ,EAAsBC,GAAtB,EAA2BC,GAA3B,EAA+B;AAAA;;AAAA,8HACxBF,QADwB;;AAE9B,QAAKC,GAAL,GAAWA,GAAX,CAF8B,CAEf;AACf,QAAKC,GAAL,GAAWA,GAAX;AAH8B;AAI9B;;;;6BAEU;AACV;;AAEA,OAAIC,UAAUC,WAAW,KAAKC,MAAL,CAAYC,KAAvB,CAAd;AACA,OAAIC,MAAMJ,OAAN,CAAJ,EAAoB;AACnB,SAAKK,MAAL,CAAYC,IAAZ;AACA;AACD,OAAIN,UAAU,KAAKD,GAAnB,EAAwB;AACvB,SAAKM,MAAL,CAAYC,IAAZ,CAAiB,mCAAmC,KAAKP,GAAzD;AACA;AACD,OAAIC,UAAU,KAAKF,GAAnB,EAAwB;AACvB,SAAKO,MAAL,CAAYC,IAAZ,iCAA+C,KAAKR,GAApD;AACA;AACA;AACD;;;;EAtB2BS,S","file":"RangeValidator.js","sourcesContent":["class RangeValidator extends Validator {\n\n\tconstructor(selector, min, max){\n\t\tsuper(selector); \n\t\tthis.min = min //take arguments from constructor above and put them into properties of the class\n\t\tthis.max = max\n\t}\n\n\tvalidate() {\n\t\tsuper.validate();\n\n\t\tlet numeric = parseFloat(this.$field.value)\n\t\tif (isNaN(numeric)) {\n\t\t\tthis.errors.push(`Must be a number`);\n\t\t}\n\t\tif (numeric > this.max) {\n\t\t\tthis.errors.push(`Number cannot be greater than ` + this.max);\n\t\t}\t\n\t\tif (numeric < this.min) {\n\t\t\tthis.errors.push(`Number cannot be less than ${this.min}`);\n\t\t\t//you can use either manner to add the variable into your string\n\t\t}\t\n\t}\n}"]}