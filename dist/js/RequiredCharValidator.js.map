{"version":3,"sources":["RequiredCharValidator.js"],"names":["RequiredCharValidator","selector","requiredChar","foundARequiredChar","forEach","char","$field","value","includes","errors","push","Validator"],"mappings":";;;;;;;;;;;;IAAMA,qB;;;AAEL,gCAAYC,QAAZ,EAAsBC,YAAtB,EAAmC;AAAA;;AAAA,4IAC5BD,QAD4B;;AAElC,QAAKC,YAAL,GAAoBA,YAApB;AAFkC;AAGlC;;;;6BAES;AAAA;;AACT;;AAEA,OAAIC,qBAAqB,KAAzB;AACA,QAAKD,YAAL,CAAkBE,OAAlB,CAA0B,UAACC,IAAD,EAAU;AACnC,QAAI,OAAKC,MAAL,CAAYC,KAAZ,CAAkBC,QAAlB,CAA2BH,IAA3B,CAAJ,EAAqC;AACrCF,0BAAqB,IAArB;AACC;AACD,IAJD;;AAMA,OAAG,CAACA,kBAAJ,EAAwB;AACvB,SAAKM,MAAL,CAAYC,IAAZ,CAAiB,+CAA+C,KAAKR,YAArE;AACA;AACD;;;;EApBkCS,S;;AAwBnC;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAMD;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAKA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"RequiredCharValidator.js","sourcesContent":["class RequiredCharValidator extends Validator {\n\n\tconstructor(selector, requiredChar){\n\t\tsuper(selector);\n\t\tthis.requiredChar = requiredChar;\n\t}\n\n\tvalidate(){\n\t\tsuper.validate();\n\n\t\tlet foundARequiredChar = false;\n\t\tthis.requiredChar.forEach((char) => {\n\t\t\tif (this.$field.value.includes(char)){\n\t\t\tfoundARequiredChar = true;\n\t\t\t}\n\t\t});\n\n\t\tif(!foundARequiredChar) {\n\t\t\tthis.errors.push('You must include one of these characters: ' + this.requiredChar);\n\t\t}\n\t}\n}\n\n\t\t\n\t//     validate(){\n\t//         super.validate();\n\t\n\t//         const char = /^(?=.*[!@#$%^&*])/\n\t\n\t//         if (!this.$field.value.match(char)){\n\t//         this.errors.push(`Your Must include (!@#$%^&*)`)\n\t//         console.log('ugh')\n\t//         }\n\t//     }\n\t// }\n\n\n\n\n\n// class PasswordValidator extends Validator {\n\n// \tconstructor(selector){\n// \t\tsuper(selector, included, excluded);\n// \t}\n\n// \tvalidate() {\n// \t\tsuper.validate();\n\n\n\t\t// var password = this.$field.value;\n\t\t// var includedChars= this.included;\n\t\t// var excludedChars= this.excluded;\n\n\t\t// function contains(target, pattern){\n\t\t// \tvar value = 0;\n\t\t// \tpattern.forEach(function(word){\n\t\t// \t\tvalue = value + target.includes(word);\n\t\t// \t});\n\t\t// \treturn (value === 1)\n\t\t// }\n\n\t\t// console.log(contains(this.selector, this.included));\n\n\n\n\n\t\t// if (!this.$field.value.includes('@' || '?' || '!' || '$' || '%' || '#' || '&')) {\n\t\t// \tthis.errors.push(`Must include (!@#$%&)`);\n\t\t// }\n\n\t\t// if (this.$field.value.includes('^' || '.' || ',' || '~' || '*' || '(' || ')' || '{' || '}' || '[' || ']' || '+' || '=')) {\n\t\t// \tthis.errors.push(`Cannot include (^.,~*(){}[]+=)`);\n\t\t// }\n\n\t\t// if (!this.$field.value.includes(1|| 2 || 3 || 4 || 5 || 6 || 7 || 8 || 9 || 0)) {\n\t\t// \tthis.errors.push(`Must include a number`)\n\t\t// }\n\n\t\t// if (!this.$field.value === (this.$field.toUpperCase())) {\n\t\t// \tthis.errors.push(`Must include an uppercase`)\n\t\t// }\n\t\t\n\t\t// if (!this.$field.value === (this.$field.toUpperCase())) {\n\t\t// \tthis.errors.push(`Must include an lowercase`)\n\t\t// }\n\t\t// function charLength() {\n\t\t// \tif( this.$field.value.length >= 8 ) {\n\t\t// \t\treturn true;\n\t\t// \t} else{\n\t\t// \t this.errors.push(`Must be at least 8 characters`)\n\t\t// \t}\n\t\t// }\n\n\t\t// function lowercase() {\n\t\t// \tvar regex = /^(?=.*[a-z]).+$/; // Lowercase character pattern\n\n\t\t// \tif( regex.test(this.$field.value) ) {\n\t\t// \t\treturn true;\n\t\t// \t} else{\n\t\t// \t this.errors.push(`Must include a lowercase letter`)\n\t\t// \t}\n\t\t// }\n\n\t\t// function uppercase() {\n\t\t// \tvar regex = /^(?=.*[A-Z]).+$/; // Uppercase character pattern\n\n\t\t// \tif( regex.test(this.$field.value) ) {\n\t\t// \t\treturn true;\n\t\t// \t} else{\n\t\t// \t this.errors.push(`Must include a uppercase letter`)\n\t\t// \t}\n\t\t// }\n\n\t\t// function special() {\n\t\t// \tvar regex = /^(?=.*[0-9_\\W]).+$/; // Special character or number pattern\n\n\t\t// \tif( regex.test(this.$field.value) ) {\n\t\t// \t\treturn true;\n\t\t// \t} else{\n\t\t// \t this.errors.push(`Must include a special character or number`)\n\t\t// \t}\n\t\t// }\n\n\t\t\n\t\n\n\n\n\t\n\n"]}